<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fortran 基础知识</title>
    <link href="/2022/05/23/Fortran-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/05/23/Fortran-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>一个完整的Fortran代码，一般来说，<strong>以 <code>program code_name</code> 开始，以 <code>end program code_name</code> 结束的首末声明</strong>，<strong>变量声明</strong>以及<strong>需要执行的命令或者操作</strong>三个部分组成。通用的 Fortran 代码文件的文件后缀可以是 <code>.f90</code>、<code>.f</code>、<code>.g95</code> 等等，但通常为了统一和适应不同版本的 Fortran 编译环境<strong>建议采用 <code>.f90</code> 后缀</strong>。和 C、C++ 语言比较类似，Fortran 代码也是通过编译执行。比如对如下所示的示例代码执行 **<code>gfortran code_name.f90 -o code_name</code> **即可生成可执行程序 <code>code_name</code>，再执行 **<code>./code_name</code> **则会输出代码执行结果如下。</p><p>code_name.f90</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-function"><span class="hljs-keyword">program</span></span> code_name<br>    <span class="hljs-keyword">implicit</span> <span class="hljs-keyword">none</span><br>    <span class="hljs-keyword">real</span> x, y, z<br>    x = <span class="hljs-number">2</span><br>    y = <span class="hljs-number">3</span><br>    z = x + y * <span class="hljs-number">5</span><br>    <span class="hljs-built_in">print</span> *, x, y<br>    <span class="hljs-built_in">print</span> *, <span class="hljs-string">&#x27;z = &#x27;</span>, z <br><span class="hljs-keyword">end</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span> code_name<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">  2.00000000       3.00000000    <br>z =    17.0000000<br></code></pre></td></tr></table></figure><p>上面给出的示例代码中有一行 <code>implicit none</code>，明明本来的代码已经符合三个部分了，为什么要多加这一行呢？这是因为在旧 Fortran 中存在隐式类型声明，为了规避在 Fortran 95 以后的版本中可能出现错误，特意在每个开头声明之后都加上这么一行。这样我们在写代码的过程中如果使用到了未提前声明或者打错字符的变量名，编译程序就会报错告知我们。这对于形成良好的代码习惯和增强代码可维护性有很大的帮助，因此此行声明必不可少。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Fortran 语言和别的高级编程语言一样，都拥有完整的运算符，包括简单的加减乘除、复杂的乘方等运算。如下表所示是 Fortran 语言中的运算符的写法和使用方法，其中运算符的计算优先顺序与数学计算中一致：<strong>乘方运算 &gt; 乘除运算 &gt; 加减运算</strong>。</p><h2 id="数据类型与变量声明"><a href="#数据类型与变量声明" class="headerlink" title="数据类型与变量声明"></a>数据类型与变量声明</h2><p>Fortran 语言的数据类型比较简单，没有像其他高级编程语言那样分得那么细，主要分为<strong>整数型</strong>和<strong>实数型</strong>两个大类。整数型的计算与 C、C++、Python 中有点类似，整数与整数的商还是一个整数。<strong>即使当不整除的时候，为了保持结果和参与运算的变量类型一致 Fortran 编译器会只取正常数学运算结果的整数部分</strong>。实数型其实与数学意义上的实数是一致的，既<strong>包括整数也包括小数</strong>，所以当不整除的除法中的两个变量<strong>有一个为实数型</strong>时，Fortran 编译器会将两个变量类型对应成实数型并<strong>计算出正常的带小数的结果</strong>。</p><p><strong>所有变量都要在使用之前声明类型</strong>，所以<strong>当属于同一种类型时我们可以按照下面那样写在同一行</strong>，不同变量之间用逗号分隔开。为了代码美观，<strong>建议在逗号与后一个变量名之间留一个空格</strong>。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-comment">!!! 两个整数型相除</span><br><span class="hljs-keyword">integer</span> x, y<br>x = <span class="hljs-number">2</span><br>y = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span> *, x/y   <span class="hljs-comment">! 结果为 0</span><br><span class="hljs-built_in">print</span> *, y/x   <span class="hljs-comment">! 结果为 1</span><br><br><span class="hljs-comment">!!! 被除数为实数型，除数为整数型</span><br><span class="hljs-keyword">real</span> m <br><span class="hljs-keyword">integer</span> n <br>m = <span class="hljs-number">10</span><br>n = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span> *, m/n   <span class="hljs-comment">! 结果为  3.33333325</span><br><br><span class="hljs-comment">!!! 被除数为整数型，除数为实数型</span><br><span class="hljs-keyword">integer</span> m <br><span class="hljs-keyword">real</span> n <br>m = <span class="hljs-number">10</span><br>n = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span> *, m/n   <span class="hljs-comment">! 结果为  3.33333325</span><br><br><span class="hljs-comment">!!! 被除数和除数均为实数型</span><br><span class="hljs-keyword">real</span> m, n<br>m = <span class="hljs-number">10</span><br>n = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span> *, m/n   <span class="hljs-comment">! 结果为  3.33333325</span><br></code></pre></td></tr></table></figure><p>实际上，Fortran 语言除了整数型和实数型两个大类之外，还有一些小类，比如说<strong>复数类型、布尔类型、字符串类型</strong>。因为操作系统一般使用实数型或者复数类型时都<strong>默认采用单精度</strong>，如果需要使用双精度则需要特殊声明。所有数据类型总结如下：</p><table><thead><tr><th>数据类型</th><th>标识符</th><th>示例</th></tr></thead><tbody><tr><td>整数型</td><td>integer</td><td>2</td></tr><tr><td>实数型</td><td>real</td><td>2.0</td></tr><tr><td>双精度实数型</td><td>double precision</td><td>2.0</td></tr><tr><td>复数型</td><td>complex</td><td>(1.0, 2.0)</td></tr><tr><td>双精度复数型</td><td>complex(kind(0d0))</td><td>(1.0, 2.0)</td></tr><tr><td>布尔型</td><td>logical</td><td>true&#x2F;false</td></tr><tr><td>字符串型</td><td>character</td><td>“Text”</td></tr></tbody></table><h5 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h5><p>这里有一点值得十分注意：一个 Fortran 文件的<strong>变量声明必须在最开始</strong>，如果多个变量声明行之间掺杂了其他的操作行或者命令行，则<strong>后续的变量声明将会无效</strong>，在编译的过程中就会直接报错。</p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>Fortran 既然是为数值计算而生的，那么自然就包含了对初等数学函数和数据类型变化函数的完整支持。如下表所示为有关初等数学函数的写法和用法。</p><table><thead><tr><th>写法</th><th>函数名称</th><th>数学表达</th><th>必要条件</th><th>函数值的范围</th></tr></thead><tbody><tr><td>sqrt(x)</td><td>平方根</td><td>\sqrt{x}<em>x</em></td><td>x \geqq 0<em>x</em>≧0</td><td></td></tr><tr><td>sin(x)</td><td>正弦函数</td><td>\sin xsin<em>x</em></td><td></td><td></td></tr><tr><td>cos(x)</td><td>余弦函数</td><td>\cos xcos<em>x</em></td><td></td><td></td></tr><tr><td>tan(x)</td><td>正切函数</td><td>\tan xtan<em>x</em></td><td></td><td></td></tr><tr><td>asin(x)</td><td>反正弦函数</td><td>\sin^{-1}xsin−1<em>x</em></td><td>-1\leqq x \leqq 1−1≦<em>x</em>≦1</td><td>-\frac{\pi}{2} \leqq f \leqq \frac{\pi}{2}−2<em>π</em>≦<em>f</em>≦2<em>π</em></td></tr><tr><td>acos(x)</td><td>反余弦函数</td><td>\cos^{-1}xcos−1<em>x</em></td><td>-1\leqq x \leqq 1−1≦<em>x</em>≦1</td><td>0 \leqq f \leqq \pi0≦<em>f</em>≦<em>π</em></td></tr><tr><td>atan(x)</td><td>反正切函数</td><td>\tan^{-1}xtan−1<em>x</em></td><td></td><td>-\frac{\pi}{2} &lt; f &lt; \frac{\pi}{2}−2<em>π</em>&lt;<em>f</em>&lt;2<em>π</em></td></tr><tr><td>atan2(y, x)</td><td>反正切函数</td><td>\tan^{-1}(y&#x2F;x)tan−1(<em>y</em>&#x2F;<em>x</em>)</td><td></td><td>-\pi &lt; f &lt; \pi−<em>π</em>&lt;<em>f</em>&lt;<em>π</em></td></tr><tr><td>exp(x)</td><td>指数函数</td><td>e^x<em>e**x</em></td><td></td><td></td></tr><tr><td>log(x)</td><td>对数函数</td><td>\log_{e}xlog<em>e**x</em></td><td>x &gt; 0<em>x</em>&gt;0</td><td></td></tr><tr><td>log10(x)</td><td>常用对数函数</td><td>\log_{10}xlog10<em>x</em></td><td>x &gt; 0<em>x</em>&gt;0</td><td></td></tr><tr><td>sinh(x)</td><td>双曲正弦函数</td><td>\sinh xsinh<em>x</em></td><td></td><td></td></tr><tr><td>cosh(x)</td><td>双曲余弦函数</td><td>\cosh xcosh<em>x</em></td><td></td><td></td></tr><tr><td>tanh(x)</td><td>双曲正切函数</td><td>\tanh xtanh<em>x</em></td><td></td><td></td></tr></tbody></table><p>下表为有关数据类型变化函数的写法和用法。</p><table><thead><tr><th>写法</th><th>函数名称</th><th>输入类型</th><th>输出类型</th><th>函数的含义</th></tr></thead><tbody><tr><td>real(n)</td><td>实数化</td><td>整数</td><td>实数</td><td>变成实数型</td></tr><tr><td>abs(n)</td><td>绝对值</td><td>整数</td><td>整数</td><td>n<em>n</em> 的绝对值</td></tr><tr><td>mod(m, n)</td><td>求余</td><td>2个整数</td><td>整数</td><td>m<em>m</em> 对 n<em>n</em> 求余</td></tr><tr><td>int(x)</td><td>整数化</td><td>实数</td><td>整数</td><td>变成整数型(去尾)</td></tr><tr><td>nint(x)</td><td>整数化</td><td>实数</td><td>整数</td><td>变成整数型(四舍五入)</td></tr><tr><td>sign(x, s)</td><td>符号变更</td><td>实数</td><td>实数</td><td>s \geqq 0, \lvert x \rvert; s &lt; 0, -\lvert x \rvert<em>s</em>≧0,∣<em>x</em>∣;<em>s</em>&lt;0,−∣<em>x</em>∣</td></tr><tr><td>abs(x)</td><td>绝对值</td><td>实数或复数</td><td>实数</td><td>x<em>x</em> 的绝对值</td></tr><tr><td>mod(x, y)</td><td>求余</td><td>2个实数</td><td>实数</td><td>x<em>x</em> 对 y<em>y</em> 求余</td></tr><tr><td>real(z)</td><td>复数的实部</td><td>复数</td><td>实数</td><td>z<em>z</em> 的实部</td></tr><tr><td>imag(z)</td><td>复数的虚部</td><td>复数</td><td>实数</td><td>z<em>z</em> 的虚部</td></tr><tr><td>cmplx(x, y)</td><td>复数化</td><td>两个实数</td><td>复数</td><td>x+iy<em>x</em>+<em>i**y</em></td></tr><tr><td>conjg(z)</td><td>共轭复数</td><td>复数</td><td>复数</td><td>z<em>z</em> 的共轭复数</td></tr></tbody></table><h2 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h2><p>Fortran 的打印输出其实已经在前面的示例代码中已经提到了，就是所谓的 <code>print</code> 语句。**<code>print</code> 语句必须紧接着 <code>*</code>**，其含义是按照标准格式输出，如果缺失这个的话在编译时就会报出 <code>Error: Expected comma in I/O list at (1)</code> 的错误。正确的打印输出示例代码如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">integer</span> n<br>n = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span> *, <span class="hljs-number">1</span>+<span class="hljs-number">2</span>, n, n-<span class="hljs-number">1</span>, n/<span class="hljs-number">1</span>, n**<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">3           2           1           2           <br></code></pre></td></tr></table></figure><p>如果需要和其他高级编程语言那样<strong>在输出的过程中加入字符串到其中</strong>，则按如下设置：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">real</span> m<br>m = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span> *, <span class="hljs-string">&#x27;m = &#x27;</span>, m, <span class="hljs-string">&#x27;  m*2 = &#x27;</span>, m*<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span> *, <span class="hljs-string">&#x27;m = &#x27;</span>,m, <span class="hljs-string">&#x27;  m*2 = &#x27;</span>,m*<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">m =    5.00000000       m*2 =    10.0000000<br>m =    5.00000000       m*2 =    10.0000000<br></code></pre></td></tr></table></figure><p>根据以上输出结果我们可以看出，<code>m</code> 与 <code>=</code> 之间的一个空格与实际输出时是一致的，而输出变量 <code>m</code> 时不管与前一个逗号之间是否有空格，输出结果都不会发生改变，都存在超过一个以上的空格。实际上，这也是 Fortran 编译器为了能够区分输出内容，而特意在标准输出时对逗号分割的内容上添加这样的空格。不过为了代码阅读上的美观，建议在代码编写时还是保持变量与逗号之间的一个空格。</p><h5 id="小提示-1"><a href="#小提示-1" class="headerlink" title="小提示"></a>小提示</h5><p>这里输出字符串的时候引用字符串的符号**可以使用<code>&#39;</code>，也可以使用<code>&quot;</code>**。本质上没有什么区别，只是需要成对使用，不然就会报错。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>前面我们所介绍的有关数据类型基本上能够涵盖一般的日常使用，但是对于科研人员来说，矩阵、行列式等等才是计算过程中不可缺少的数据类型。为此，Fortran 也有了数组一样的数据类型来支持这一需求。如下所示，我们可以直接采用原有的整数型、实数型和复数型定义数组。<strong>当括号中只有一个数字时，表示是一维数组；当括号中有逗号分割的两个数字时，表示是二维数组；三维数组以此类推</strong>。二维数组可以用于表示我们所熟知的矩阵、行列式等数据类型。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">integer</span> m(<span class="hljs-number">10</span>)         <span class="hljs-comment">! 长度为 10 的整数型数组</span><br><span class="hljs-keyword">real</span> x(<span class="hljs-number">20</span>), y(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)   <span class="hljs-comment">! 长度为 20 的实数型数组， 4 行 x 5 列的二维实数型数组</span><br><span class="hljs-keyword">complex</span> matrix(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment">! 5 行 x 5 列的二维复数型数组</span><br></code></pre></td></tr></table></figure><h5 id="小提示-2"><a href="#小提示-2" class="headerlink" title="小提示"></a>小提示</h5><p>这里需要注意的是，在定义数组的时候<strong>不仅可以用正整数，也可以用负整数和 0</strong>。比如 <code>real n(-3:5)</code> 表示定义一个长度为 9、序号从 -3 到 5 (包括 0)的一维数组，<code>real m(-2:1, 0:4)</code> 表示定义一个 3 行 x 4 列、行序号从 -2 到 0、列序号从 1 到 4 的二维数组。一般来说，为了与实际数学运算中的理解保持一致，建议采用正整数来定义数组更加方便。</p><h3 id="数组元素的选取"><a href="#数组元素的选取" class="headerlink" title="数组元素的选取"></a>数组元素的选取</h3><p>既然定义了数组，那么我们就需要有对于数组的增加、选择这样的基本操作。Fortran <strong>数组中的序号是从 1 开始的，即写作 n(1)<strong>，这点与其他高级编程语言略有不同，不过符合人类的数学认识。因此如下所示，当定义一个长度为 10 的数组 n 时，数组 n 的最后一个元素就是 n(10)。在实际的存储中，我们能够很容易理解一维数组是按照 1 到 10 的顺序从左往右排列的，但是在二维数组中又会是怎么样呢？是行优先还是列优先呢？一般来说，在我们接触过的高级编程语言中几乎都是行优先的，即先存储第一行再存储第二行，以此类推。但是，在 Fortran 中则是</strong>列优先</strong>的，也就是说 Fortran 的二维数组<strong>存储时会先存储第一列再存储第二列</strong>，再以此类推。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">real</span> n(<span class="hljs-number">10</span>)     <span class="hljs-comment">! n(1) ~ n(10)</span><br><span class="hljs-keyword">real</span> m(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)   <span class="hljs-comment">! m(1, 1) m(2, 1) m(3, 1) ... m(4, 4)</span><br></code></pre></td></tr></table></figure><h5 id="小提示-3"><a href="#小提示-3" class="headerlink" title="小提示"></a>小提示</h5><p>如果我们在使用数组 n 的过程中忘记了加上序号，那么程序<strong>默认就会对整个数组的全部元素进行操作</strong>，而非像其他高级编程语言可能会指向数组的第一个元素。</p><p>当我们想要去选取数组中的某一个元素时，可以直接通过对应的序号进行选取。但是如果想要选多个元素或者某一行、某一列时，这就有点不同了。比如说，现在有一个长度为 10 的一维数组 n，我们想要获取到从第 3 个元素到第 5 个元素的 3 个元素，**应该使用 <code>:</code> 来将序号的上下限分隔开同时选中，即 n(3:5)**。如果有一个 3 行 x 4 列 的二维数组 m，我们想要获取到第 2 行到第 3 行的所有元素，则应该使用 m(2:3, 1:4) 来选取。</p><h2 id="跨行与注释"><a href="#跨行与注释" class="headerlink" title="跨行与注释"></a>跨行与注释</h2><p>有的时候我们编写的<strong>计算式可能会比较长</strong>，这个时候为了代码和公式的高可阅读性，我们通常采用 Fortran 语言所提供的跨行功能。比如说如下所示的原打印输出，就可以在<strong>中途使用 <code>&amp;</code> 符号来声明下一行是前一行的后续</strong>，这样的执行结果是一致的。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">print</span> *, zhang, qian, sun, li, zhou, wu, zhen, wang<br><br><span class="hljs-comment">!!! 可以换成</span><br><span class="hljs-built_in">print</span> *, zhang, qian, sun, li &amp;<br>       , zhou, wu, zhen, wang<br></code></pre></td></tr></table></figure><p>上面的例子是变量的跨行输出，如果是一个长字符串，也是可以使用一样的方式的，<strong>只是需要在中断的前一行末尾和下一行开头同时加上 <code>&amp;</code> 符号</strong>，如下所示。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">print</span> *, <span class="hljs-string">&#x27;Fortran is so good for the scientific calculation.&#x27;</span><br><br><span class="hljs-comment">!!! 可以换成</span><br><span class="hljs-built_in">print</span> *, <span class="hljs-string">&#x27;Fortran is so good &amp;</span><br><span class="hljs-string">          &amp;for the scientific calculation.&#x27;</span><br></code></pre></td></tr></table></figure><p>我们之前在定义变量的时候已经提过，为了代码整洁性可能会同时将同一类型的变量放置在同一行，之间用逗号分割即可。如果是在给变量赋值的时候，是不是也能够将赋值式放置在同一行呢？原则上来说，<strong>如果赋值式比较短的话，是可以将多行赋值式缩短在同一行的</strong>，它们之间使用 <code>;</code> 进行连接。这里值得注意的是，**最后一个赋值式后面一定不要多加 <code>;</code>**，如下所示。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-comment">!!! 修改前</span><br>x = <span class="hljs-number">3</span><br>y = <span class="hljs-number">4</span><br>z = <span class="hljs-number">5</span><br><br><span class="hljs-comment">!!! 修改后</span><br>x = <span class="hljs-number">3</span>; y = <span class="hljs-number">4</span>; z = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Fortran 语言中的注释其实在上面的内容中也已经接触到了，**<code>!</code> 之后的内容将会被 Fortran 编译器认为是注释内容<strong>。一般来说，一个 <code>!</code> 的注释其实就已经足够了，但是为了区分行注释与行末注释，建议在</strong>行注释的时候使用三个 <code>!</code><strong>，而在</strong>行末注释时使用一个 <code>!</code>**。当然如果存在相邻多行同时进行注释，或者在一个可视窗口内有多个行末注释，建议协调成同一列以增强代码整洁性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Fortran</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 多态</title>
    <link href="/2022/05/22/C++/"/>
    <url>/2022/05/22/C++/</url>
    
    <content type="html"><![CDATA[<p>​       有了虚函数，基类指针指向基类对象时就使用基类的成员（包括成员函数和成员变量），指向派生类对象时就 使用派生类的成员。换句话说，基类指针可以按照基类的方式来做事，也可以按照派生类的方式来做事，它有 多种形态，或者说有多种表现方式，我们将这种现象称为<strong>多态（Polymorphism）</strong>。</p><p>​       C++提供多态的目的是：可以通过基类指针对所有派生类（包括直接派生和间接派生）的成员变量和成员函数 进行“全方位”的访问，尤其是成员函数。如果没有多态，我们只能访问成员变量。</p><p>​       除了指针，<strong>引用也可以实现多态</strong>。不过引用不像指针灵活，指针可以随时改变指向，而引用只能指代固定的对象，在多态性方面缺乏表现力，所 以以后我们再谈及多态时一般是说指针。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/22/hello-world/"/>
    <url>/2022/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
